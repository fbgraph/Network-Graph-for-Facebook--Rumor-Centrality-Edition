/*******************************************************
 * Copyright (C) 2015-2016 Lai Chun Kiu - All Rights Reserved
 * 
 * This file is part of Network Graph for Facebook <http://netgraph.laichunkiu.org/>.
 * Network Graph for Facebook is a further developed student team project from CityU.
 * This file is authorized for use by "Network Graph for Facebook: Rumor Centrality"
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Written by Lai Chun Kiu <laichunkiu@hotmail.com>, August 2015
 *******************************************************/

function popUpLink(e) { var t = 600, s = 400, i = screen.width / 2 - t / 2, n = screen.height / 2 - s / 2; window.open(e.dataset.href, "", "width=" + t + ", height=" + s + ", top=" + n + ", left=" + i) } var functionAlert = new MetroAlert, permissionWarringAlert = new MetroAlert, crossButton = null, buttons = null, permissionWarring = null, isProcessFlow = !1, isContinue = !0, Service = function () { this.posts = [], this.users = [], this.pairs = [], this.likesCount = 0, this.likePagingCache = [], this.userDataReceivedCount = 0, this.storePost = function (e) { for (var t = 0; t < e.length; t++) { var s = e[t]; if (s.status_type) { var i = new Post(s.id, s.message, s.story, s.created_time, s.status_type); s.likes && (i.storeLikes(s.likes.data), s.likes.paging.next && this.likePagingCache.push(new likeCache(s.id, s.likes.paging.next))), this.posts.push(i) } } }, this.storeAndGetUser = function (e) { for (var t = 0; t < this.users.length; t++) { var s = this.users[t]; if (s.id == e) return s } var s = new User(e); return this.users.push(s), s }, this.getPostById = function (e) { for (var t = 0; t < this.posts.length; t++) { var s = this.posts[t]; if (e == s.id) return s } } }, service = new Service, likeCache = function (e, t) { this.postId = e, this.url = t }, Post = function (e, t, s, i, n) { this.id = e, this.message = t, this.story = s, this.time = i, this.type = n, this.likes = [], this.storeLikes = function (e) { for (var t = 0; t < e.length; t++) { var s = service.storeAndGetUser(e[t].id); this.likes.push(s), service.likesCount++ } } }, User = function (e) { this.id = e, this.name = name, this.likedPost = [] }, Pair = function (e, t) { this.a = e, this.b = t }, getdata = function (e, t) { FB.api(e, { fields: t, since: 1420070400 }, function (e) { e && !e.error ? (service.storePost(e.data), updateNumbers(), e.paging && isContinue ? setTimeout(function (e) { getdata(e) }(e.paging.next), 100) : isProcessFlow && (service.likePagingCache.length > 0 ? setTimeout(function () { fatchLikes() }, 500) : setTimeout(function () { fatchUser() }, 500))) : error() }) }, fatchLikes = function () { if (service.likePagingCache.length > 0) { var e = service.likePagingCache.pop(); FB.api(e.url, function (e) { return function (t) { if (t && !t.error) { var s = (JSON.stringify(t), service.getPostById(e)); s.storeLikes(t.data), updateNumbers(), t.paging.next && service.likePagingCache.push(new likeCache(s.id, t.paging.next)), service.likePagingCache.length > 0 && isContinue ? setTimeout(function (e) { fatchLikes() }, 100) : isProcessFlow && setTimeout(function () { fatchUser() }, 500) } else error() } }(e.postId)) } }, fatchUser = function () { service.userDataReceivedCount = 0; var e = service.users.length; if (e > 0) for (var t = 0; e > t; t++) { var s = service.users[t]; FB.api(s.id, function (e) { return function (t) { t && !t.error ? (e.name = t.name, ++service.userDataReceivedCount == service.users.length && isProcessFlow && setTimeout(function () { pair() }, 500)) : error() } }(s)) } else isProcessFlow && setTimeout(function () { pair() }, 500) }, pair = function () { for (var e = service.posts.length, t = 0; e > t; t++) for (var s = service.posts[t], i = s.likes, n = 0; n < i.length; n++) { i[n].likedPost.push(s); for (var r = n + 1; r < i.length; r++) service.pairs.push(new Pair(i[n], i[r])) } ProcessFinish(service) }, downloadEdge = function () { for (var e = "Source,Target,Type\r\n", t = 0; t < service.pairs.length; t++) { var s = service.pairs[t]; e += s.a.id + "," + s.b.id + ",undirected\r\n" } var i = document.createElement("a"); i.download = "FB_Network_Graph_Edges.csv", i.href = "data:text/csv;charset=utf-8," + encodeURIComponent(e), i.innerHTML = "download Edge", i.target = "_blank", i.click() }, downloadNode = function () { for (var e = "id,Label\r\n", t = 0; t < service.users.length; t++) { var s = service.users[t]; e += s.id + "," + s.name + "\r\n" } var i = document.createElement("a"); i.download = "FB_Network_Graph_Nodes.csv", i.href = "data:text/csv;charset=utf-8," + encodeURIComponent(e), i.innerHTML = "download Node", i.target = "_blank", i.click() }, alertDidAppear = function (e, t) { if (e == this.functionAlert) { if (null == crossButton) { crossButton = document.getElementById("crossButton").cloneNode(!0); var s = document.getElementById("crossButton"); s.parentNode.removeChild(s) } if (t.appendChild(crossButton), null == buttons) { buttons = document.getElementById("buttons").cloneNode(!0); var s = document.getElementById("buttons"); s.parentNode.removeChild(s) } t.appendChild(buttons) } if (e == this.permissionWarringAlert) { if (null == permissionWarring) { permissionWarring = document.getElementById("permissionWarring").cloneNode(!0); var s = document.getElementById("permissionWarring"); s.parentNode.removeChild(s) } t.appendChild(permissionWarring) } }, stopFetch = function () { isContinue = !1 }, updateNumbers = function () { document.getElementById("loadingFeedsCount").innerText = service.posts.length + " feeds", document.getElementById("loadinglikesCount").innerText = service.likesCount + " likes" }, error = function () { isContinue = !1, alert("Something happened.") }, TryToStart = function () { FB.getLoginStatus(function (e) { "connected" === e.status ? tryToPassPermission() : FB.login(function (e) { e.authResponse && tryToPassPermission() }, { scope: "user_posts" }) }) }, tryToPassPermission = function () { FB.api("/me/permissions ", "GET", {}, function (e) { "granted" == e.data[0].status && "granted" == e.data[1].status ? popUpAlert() : permissionWarringAlert.popUp() }) }, permissionWarringComfirm = function () { permissionWarringAlert.dismiss(), FB.login(function (e) { e.authResponse && FB.api("/me/permissions ", "GET", {}, function (e) { "granted" == e.data[0].status && "granted" == e.data[1].status && popUpAlert() }) }, { scope: "user_posts", auth_type: "rerequest" }) }, popUpAlert = function () { FB.api("/me", function (e) { document.getElementById("informationArea").innerHTML += e.name + "<br>", startProcess() }) };